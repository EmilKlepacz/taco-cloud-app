If you're able to see your tables in the H2 Console (`http://localhost:8080/h2-console`) but encounter an empty database when connecting through IntelliJ, the issue likely stems from how in-memory H2 databases operate. Here's a detailed explanation and steps to resolve the problem.

## Understanding In-Memory H2 Databases

### In-Memory Database Scope

- **Single JVM Scope**: In-memory H2 databases (`jdbc:h2:mem:tacocloud`) are scoped to a single Java Virtual Machine (JVM). This means:
  - **Same JVM Connections**: Connections made within the same JVM (e.g., your Spring Boot application and the H2 Console running within it) share the same in-memory database.
  - **Different JVM Connections**: Connections made from different JVMs (e.g., IntelliJ's Database tool connecting externally) **do not** share the same in-memory database. Each connection in a different JVM creates its own separate in-memory instance.

### Implications

- **H2 Console**: Since the H2 Console is typically embedded within your Spring Boot application, it shares the same JVM and thus the same in-memory database.
- **IntelliJ Connection**: When you connect via IntelliJ's Database tool, it operates in a separate JVM, leading to a different in-memory database instance, which appears empty.

## Solutions

To access the same H2 database from both the H2 Console and IntelliJ, consider the following approaches:

### Option 1: Use H2 in TCP Server Mode

Running H2 in TCP server mode allows multiple JVMs to connect to the same database instance.

#### Step-by-Step Guide

1. **Update `application.yml` to Use TCP Server Mode**

   Modify your `application.yml` to start the H2 database in TCP server mode:

   ```yaml
   spring:
     datasource:
       url: jdbc:h2:tcp://localhost:9092/tacocloud
       username: sa       # Default username for H2
       password:          # Default password (usually empty)
       driver-class-name: org.h2.Driver
     h2:
       console:
         enabled: true
         path: /h2-console
   ```

   **Explanation:**
   - `jdbc:h2:tcp://localhost:9092/tacocloud`: Specifies that H2 should run in TCP server mode on port `9092` with the database name `tacocloud`.

2. **Start H2 TCP Server**

   Ensure that the H2 TCP server is started when your Spring Boot application runs. Spring Boot can automatically start the H2 TCP server with the above configuration. If not, you can manually start it:

   ```java
   import org.h2.tools.Server;
   import org.springframework.boot.CommandLineRunner;
   import org.springframework.context.annotation.Bean;
   import org.springframework.context.annotation.Configuration;

   @Configuration
   public class H2ServerConfiguration {

       @Bean
       public CommandLineRunner startH2Server() {
           return args -> {
               Server.createTcpServer("-tcpAllowOthers").start();
           };
       }
   }
   ```

   **Note**: Ensure that port `9092` is free or choose another port if necessary.

3. **Configure IntelliJ to Connect via TCP**

   Now, set up IntelliJ to connect to the H2 database in TCP server mode.

   - **Open Database Tool Window**:
     - Go to **View > Tool Windows > Database** or press `Alt + 1` and select the **Database** tab.

   - **Add New Data Source**:
     1. Click the **+** button and select **Data Source > H2**.
     2. In the **Data Source and Drivers** dialog:
        - **Name**: Enter a name (e.g., "H2 TCP Server").
        - **URL**: Enter `jdbc:h2:tcp://localhost:9092/tacocloud`.
        - **User**: `sa` (or your configured username).
        - **Password**: Leave blank or enter if set.
        - **Driver**: Ensure H2 driver is selected. If prompted, download the driver.

   - **Test Connection**:
     - Click **Test Connection** to verify the setup.
     - If successful, click **OK** or **Apply** to save.

4. **Access the Same Database**

   With this configuration:
   - **H2 Console**: Connects via `jdbc:h2:tcp://localhost:9092/tacocloud`.
   - **IntelliJ**: Connects via the same JDBC URL, sharing the same in-memory database.

   **Note**: Both connections must be active **while the application is running**, as in-memory databases persist only during the JVM's lifecycle.

### Option 2: Use a File-Based H2 Database

If you prefer a persistent database that survives application restarts and can be accessed by multiple tools without relying on TCP server mode, switch to a file-based H2 database.

#### Step-by-Step Guide

1. **Update `application.yml` for File-Based Database**

   Modify your `application.yml` to use a file-based H2 database:

   ```yaml
   spring:
     datasource:
       url: jdbc:h2:file:./data/tacocloud;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=TRUE
       username: sa       # Default username for H2
       password:          # Default password (usually empty)
       driver-class-name: org.h2.Driver
     h2:
       console:
         enabled: true
         path: /h2-console
   ```

   **Explanation:**
   - `jdbc:h2:file:./data/tacocloud`: Specifies a file-based database located in the `data` directory relative to your project root.
   - `DB_CLOSE_ON_EXIT=FALSE`: Keeps the database open even after the JVM exits.
   - `AUTO_SERVER=TRUE`: Allows automatic mixed-mode access, enabling multiple processes to connect to the same database.

2. **Create the Data Directory**

   Ensure that the `data` directory exists in your project root or adjust the path as needed.

3. **Configure IntelliJ to Connect via File-Based URL**

   - **Open Database Tool Window**:
     - Go to **View > Tool Windows > Database** or press `Alt + 1` and select the **Database** tab.

   - **Add New Data Source**:
     1. Click the **+** button and select **Data Source > H2**.
     2. In the **Data Source and Drivers** dialog:
        - **Name**: Enter a name (e.g., "H2 File-Based").
        - **URL**: Enter `jdbc:h2:file:./data/tacocloud`.
        - **User**: `sa` (or your configured username).
        - **Password**: Leave blank or enter if set.
        - **Driver**: Ensure H2 driver is selected. If prompted, download the driver.

   - **Test Connection**:
     - Click **Test Connection** to verify the setup.
     - If successful, click **OK** or **Apply** to save.

4. **Access the Same Database**

   With this configuration:
   - **H2 Console**: Connects via `jdbc:h2:file:./data/tacocloud`.
   - **IntelliJ**: Connects via the same JDBC URL, sharing the same persistent database.

   **Benefits**:
   - **Persistence**: Data remains intact across application restarts.
   - **Ease of Access**: Both H2 Console and IntelliJ can access the same database without additional server configurations.

### Additional Tips

#### Verify Active Profiles

If you're using Spring profiles, ensure that you're modifying the correct `application-{profile}.yml` or `application-{profile}.properties` file. The active profile can influence which configuration files are loaded.

- **Set Active Profile**:
  ```yaml
  spring:
    profiles:
      active: dev
  ```
  Or pass it as a command-line argument:
  ```bash
  mvn spring-boot:run -Dspring-boot.run.profiles=dev
  ```

#### Refresh IntelliJ Database View

Sometimes, IntelliJ might not automatically refresh the database schema. To manually refresh:

1. Open the **Database** tool window.
2. Right-click on your H2 data source.
3. Select **Refresh**.

#### Check SQL Initialization Scripts

Ensure that your `schema.sql` and `data.sql` (if any) are correctly placed in `src/main/resources` and are being executed. Spring Boot should automatically run these scripts if they are present.

```yaml
spring:
  sql:
    init:
      mode: always  # Ensures SQL scripts are always run
```

#### Use Spring Boot DevTools for Enhanced Development Experience

Adding **Spring Boot DevTools** can facilitate automatic restarts and reloads during development.

- **Add Dependency**:
  ```xml
  <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <scope>runtime</scope>
      <optional>true</optional>
  </dependency>
  ```

### Summary

The core issue arises from the nature of in-memory H2 databases being confined to a single JVM. To access the same database instance from both your Spring Boot application (and its H2 Console) and IntelliJ:

1. **Use H2 in TCP Server Mode**:
   - Allows multiple JVMs to connect to the same in-memory database.
   - Requires updating the JDBC URL and ensuring the H2 server is running.

2. **Use a File-Based H2 Database**:
   - Provides persistence across application restarts.
   - Simplifies access from multiple tools without additional server configurations.

By implementing one of these approaches, you should be able to see your tables and data consistently across both the H2 Console and IntelliJ.
